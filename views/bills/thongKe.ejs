<div class="container shadow my-5 px-5 py-4">
    <h2>Thong ke</h2>
    
    <div style="display: flex; justify-content: space-between;">
        <div>
            Từ: <input id="formDate" type="date" min="" max="">
            đến: <input id="toDate" type="date" min="" max="">
        </div>

        <div>
            <% console.log("listBill: " +listBill); %>
                <% let totalPriceBill=listBill.reduce((total, item)=> { return total += item.real_price;}, 0)%>
                    <strong>
                        Tổng: <%= totalPriceBill.toLocaleString('vi-VN', { style: 'currency' , currency: 'VND' }) %>
                    </strong>
        </div>
    </div>

    <canvas id="myChart"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>

        function formatDate(inputDateStr) {
            const [year, month, day] = inputDateStr.split('-').map(Number);
            const dateObject = new Date(year, month - 1, day); // month - 1 vì tháng trong JavaScript tính từ 0
            const isoDateString = dateObject.toISOString();
            return isoDateString;
        }

        function countOrdersByDay(startDate, endDate, orders) {
            const start = new Date(startDate);
            const end = new Date(endDate);

            const startMonth = start.getMonth();
            const startYear = start.getFullYear();

            const endMonth = end.getMonth();
            const endYear = end.getFullYear();

            let result = {};

            for (let order of orders) {
                const orderDate = new Date(order.create_at);

                // Kiểm tra xem ngày đơn hàng có trong khoảng thời gian bắt đầu và kết thúc không
                if (
                    orderDate.getFullYear() >= startYear &&
                    orderDate.getFullYear() <= endYear &&
                    orderDate.getMonth() >= startMonth &&
                    orderDate.getMonth() <= endMonth
                ) {
                    const dayKey = `${orderDate.getFullYear()}-${(orderDate.getMonth() + 1)
                        .toString()
                        .padStart(2, '0')}-${orderDate.getDate().toString().padStart(2, '0')}`;

                    if (!result[dayKey]) {
                        result[dayKey] = { '0': 0, '3': 0, '4': 0 };
                    }

                    result[dayKey][order.status.toString()]++;
                }
            }

            // Chuyển đổi result thành mảng các cặp key-value và sắp xếp theo ngày
            const sortedResult = Object.entries(result).sort(([dateA], [dateB]) => {
                return new Date(dateA) - new Date(dateB);
            });

            // Tạo mảng ngày và các mảng kết quả tương ứng
            const dates = [];
            const status0 = [];
            const status3 = [];
            const status4 = [];

            sortedResult.forEach(([date, counts]) => {
                dates.push(date);
                status0.push(counts['0'] || 0);
                status3.push(counts['3'] || 0);
                status4.push(counts['4'] || 0);
            });

            return [dates, status0, status3, status4];
        }

        function isSameYearAndMonth(date1, date2) {
            const d1 = new Date(date1);
            const d2 = new Date(date2);

            const year1 = d1.getFullYear();
            const month1 = d1.getMonth();

            const year2 = d2.getFullYear();
            const month2 = d2.getMonth();

            return year1 === year2 && month1 === month2;
        }

        function countOrdersByMonth(startDate, endDate, orders) {
            const start = new Date(startDate);
            const end = new Date(endDate);

            const startMonth = start.getMonth();
            const startYear = start.getFullYear();

            const endMonth = end.getMonth();
            const endYear = end.getFullYear();

            let months = [];
            let status0Counts = [];
            let status3Counts = [];
            let status4Counts = [];

            let result = {};

            for (let order of orders) {
                const orderDate = new Date(order.create_at);

                // Kiểm tra xem ngày đơn hàng có trong khoảng thời gian bắt đầu và kết thúc không
                if (
                    orderDate.getFullYear() >= startYear &&
                    orderDate.getFullYear() <= endYear &&
                    orderDate.getMonth() >= startMonth &&
                    orderDate.getMonth() <= endMonth
                ) {
                    const monthKey = `${orderDate.getFullYear()}-${(orderDate.getMonth() + 1).toString().padStart(2, '0')}`;

                    if (!result[monthKey]) {
                        result[monthKey] = { '0': 0, '3': 0, '4': 0 };
                    }

                    result[monthKey][order.status.toString()]++;
                }
            }

            // Sắp xếp các tháng theo thứ tự tăng dần
            const sortedMonths = Object.keys(result).sort();

            // Lặp qua các tháng đã được sắp xếp để lấy thông tin
            for (let month of sortedMonths) {
                months.push(month);
                status0Counts.push(result[month]['0'] || 0);
                status3Counts.push(result[month]['3'] || 0);
                status4Counts.push(result[month]['4'] || 0);
            }

            return [months, status0Counts, status3Counts, status4Counts];
        }

        const rawListBill = <%- JSON.stringify(listBill) %>;

        const fromDateHTML = document.getElementById("formDate");
        const toDateHTML = document.getElementById("toDate");

        let selectFromDate = formatDate("2024-01-01");
        let selectToDate = formatDate((new Date()).toISOString().split('T')[0]);
        // let [labelsChart, valuesChart] = generateYearMonthArraysWithTotal(new Date(selectFromDate), new Date(selectToDate), bills);

        let labels = [], data0 = [], data3 = [], data4 = [];

        const ctx = document.getElementById('myChart');
        const mixedChart = new Chart(ctx, {
            data: {
                datasets: [
                    {
                        type: 'line',
                        label: 'Status 0',
                        data: data0,
                    }, 
                    {
                        type: 'line',
                        label: 'Status 3',
                        data: data3,
                    },
                    {
                        type: 'line',
                        label: 'Status 4',
                        data: data4,
                    }
                ],
                labels: labels
            },
            // options: options
        });


        fromDateHTML.min = '2024-01-01';
        fromDateHTML.max = (new Date()).toISOString().split('T')[0];
        fromDateHTML.addEventListener("change", function (event) {
            const selectedDate = event.target.value;
            selectFromDate = formatDate(selectedDate);
            toDateHTML.min = (new Date(selectedDate)).toISOString().split('T')[0];

            const checkDay = isSameYearAndMonth(selectFromDate, selectToDate);
            if (checkDay) {
                const filteredOrders = rawListBill.filter(order => {
                    const orderDate = new Date(order.create_at);
                    return orderDate >= new Date(selectFromDate) && orderDate <= new Date(selectToDate);
                });
                const [label, mang0, mang3, mang4] = countOrdersByDay(selectFromDate, selectToDate, filteredOrders);

                mixedChart.data.labels = label;
                mixedChart.data.datasets[0].data = mang0;
                mixedChart.data.datasets[1].data = mang3;
                mixedChart.data.datasets[2].data = mang4;
                mixedChart.update();

            } else {
                const filteredOrders = rawListBill.filter(order => {
                    const orderDate = new Date(order.create_at);
                    return orderDate >= new Date(selectFromDate) && orderDate <= new Date(selectToDate);
                });
                const [label, mang0, mang3, mang4] = countOrdersByMonth(selectFromDate, selectToDate, filteredOrders);

                mixedChart.data.labels = label;
                mixedChart.data.datasets[0].data = mang0;
                mixedChart.data.datasets[1].data = mang3;
                mixedChart.data.datasets[2].data = mang4;
                mixedChart.update();
            }

        });

        toDateHTML.min = '2024-01-01';
        toDateHTML.max = (new Date()).toISOString().split('T')[0];
        toDateHTML.addEventListener("change", function (event) {
            const selectedDate = event.target.value;
            selectToDate = formatDate(selectedDate);
            fromDateHTML.max = (new Date(selectedDate)).toISOString().split('T')[0];

            const checkDay = isSameYearAndMonth(selectFromDate, selectToDate);
            if (checkDay) {
                const filteredOrders = rawListBill.filter(order => {
                    const orderDate = new Date(order.create_at);
                    return orderDate >= new Date(selectFromDate) && orderDate <= new Date(selectToDate);
                });
                const [label, mang0, mang3, mang4] = countOrdersByDay(selectFromDate, selectToDate, filteredOrders);

                mixedChart.data.labels = label;
                mixedChart.data.datasets[0].data = mang0;
                mixedChart.data.datasets[1].data = mang3;
                mixedChart.data.datasets[2].data = mang4;
                mixedChart.update();
            } else {
                const filteredOrders = rawListBill.filter(order => {
                    const orderDate = new Date(order.create_at);
                    return orderDate >= new Date(selectFromDate) && orderDate <= new Date(selectToDate);
                });
                const [label, mang0, mang3, mang4] = countOrdersByMonth(selectFromDate, selectToDate, filteredOrders);

                mixedChart.data.labels = label;
                mixedChart.data.datasets[0].data = mang0;
                mixedChart.data.datasets[1].data = mang3;
                mixedChart.data.datasets[2].data = mang4;
                mixedChart.update();
            }
        });
    </script>
</div>